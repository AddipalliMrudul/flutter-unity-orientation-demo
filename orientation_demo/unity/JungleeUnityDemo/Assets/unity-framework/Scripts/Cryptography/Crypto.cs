using System;
using System.Text;

namespace XcelerateGames.Cryptography
{
    public static class Crypto
    {
        private static readonly byte[] AesKey = null;
        private static readonly byte[] AesIV = null;

        //Custom IV function, if set, IV will be generated by the return value of this function
        public static Func<string> IVFunc;

        static Crypto()
        {
            //Length must be 16 or 32
            string key = "t?n*@bQ$q/5ue6m3U/[ADv6;wn+T@wRy";
            //Initialization Vector, Length must be 16
            string iv = "yG=<vD799+;8.>[j";

            AesKey = Encoding.UTF8.GetBytes(key);
            AesIV = Encoding.UTF8.GetBytes(iv);
        }

        //Encrypts the given byte array
        public static byte[] Encrypt(byte[] data)
        {
            return AesCryptography.Encrypt(data, AesKey, GetIV());
        }

        //Decrypts the given byte array
        public static byte[] Decrypt(byte[] data)
        {
            return AesCryptography.Decrypt(data, AesKey, GetIV());
        }

        private static byte[] GetIV()
        {
            if (IVFunc != null)
            {
                string ivs = IVFunc();
                XDebug.Assert(ivs.Length == 16, "IV Length must be 16");
                return Encoding.UTF8.GetBytes(ivs);
            }
            return AesIV;
        }
    }
}
